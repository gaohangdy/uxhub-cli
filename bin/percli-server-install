#!/usr/bin/env node
const fs = require('fs')
const args = require('commander')

const { getDistroArtifactList } = require('../lib/DistributionHelper')
const { progressDownload } = require('../lib/Download')
const { installPackage, startSling, waitForSlingReady } = require('../lib/Server')
const { peregrineBanner } = require('../lib/Banner')
const config = require('../config')

args.version('1.0.0')
  .option('-p, --port [port]', 'run server on port')
  .option('-n, --name [name]', 'list all peregrine servers')
  .parse(process.argv)

const options = args.opts();
let port = options.port ? options.port : config.sling.default.port
let serverName = options.name ? options.name : config.sling.default.serverName

async function serverInstall() {

 console.log(`[INFO] installing server with name '${serverName}' on port '${port}'`)

  // step 1 - get list of distribution files and download
  let distroFiles = await getDistroArtifactList()
  if (!fs.existsSync(config.download.dir)){

    console.log('Fetching core distribution')
    for (url of distroFiles.core) {
      await progressDownload(url)
    }

    console.log('Fetching packages')
    for (url of distroFiles.pkgs) {
      await progressDownload(url)
    }
  }

  // step 2 - create sling dir
  if (!fs.existsSync(config.sling.dir)){
    fs.mkdirSync(config.sling.dir)
  }

  // step 3 - start sling
  startSling()

  await waitForSlingReady(30000)

  // step 4 - install packages
  console.log('Install packages')
  for (url of distroFiles.pkgs) {
    let packageFile = url.substring(url.lastIndexOf('/')+1)
    await installPackage(packageFile)
    await waitForSlingReady(5000)
  }
}

if (!fs.existsSync(config.sling.dir)) {
  serverInstall()
} else {
  console.log(`Installation already exists at '${config.sling.dir}'. Exiting.`)
}